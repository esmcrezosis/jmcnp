package com.esmc.mcnp.web.controller.obps;


import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.esmc.mcnp.domain.entity.acteur.EuActeur;
import com.esmc.mcnp.domain.entity.ba.EuNn;
import com.esmc.mcnp.domain.entity.cm.EuCompte;
import com.esmc.mcnp.domain.entity.cm.EuMembreMorale;
import com.esmc.mcnp.domain.entity.config.EuParametres;
import com.esmc.mcnp.domain.entity.config.EuParametresPK;
import com.esmc.mcnp.domain.entity.obpsd.EuTypeNn;
import com.esmc.mcnp.domain.entity.others.EuOperation;
import com.esmc.mcnp.domain.entity.security.EuUtilisateur;
import com.esmc.mcnp.infrastructure.services.acteurs.EuActeurService;
import com.esmc.mcnp.infrastructure.services.bc.EuBonService;
import com.esmc.mcnp.infrastructure.services.cm.EuCompteService;
import com.esmc.mcnp.infrastructure.services.cm.EuMembreMoraleService;
import com.esmc.mcnp.infrastructure.services.common.EuOperationService;
import com.esmc.mcnp.infrastructure.services.obpsd.EuNnService;
import com.esmc.mcnp.infrastructure.services.setting.EuParametresService;
import com.esmc.mcnp.web.controller.base.BaseController;



@Controller
public class ExploitationController extends BaseController {

	private @Autowired EuActeurService acteurService; 
	private @Autowired EuCompteService compteService; 
	private @Autowired EuNnService nnService; 
	private @Autowired EuParametresService parametreService;
	private @Autowired EuMembreMoraleService moraleService;
	private @Autowired EuOperationService operationService;
	private @Autowired EuBonService bonService;
	


	@RequestMapping(value = "/exploitation", method = RequestMethod.GET)
	public String exploitation() {
		return "distributeur/exploitation";
	}


	/*
	    //@ModelAttribute("cumul")
		public Double CalculMontantCumul(){
			EuCompte compteNnMargeSurveillance = null;
			String codeMembreSurveillance = "";

			//retrouver surveillance
			EuActeur acteurSurveillance = acteurService.findSurveillanceSource();
			if(acteurSurveillance!=null){

				codeMembreSurveillance = acteurSurveillance.getCodeMembre();

                compteNnMargeSurveillance = compteService.findCompteById("NN-TMARGE-"+codeMembreSurveillance);
				if(compteNnMargeSurveillance!=null){
                System.out.println("compteNnMargeSurveillance= "+compteNnMargeSurveillance.getCodeCompte());

				Double sumNnSurveillance = nnService.getSumNnByTypeNnAndCodeMembre("NNMARGE", codeMembreSurveillance);

				System.out.println("sumNnSurveillance= "+sumNnSurveillance);

				if(compteNnMargeSurveillance.getSolde() >= sumNnSurveillance){
					return sumNnSurveillance;
				}else{
					return Double.valueOf(1);//montant non conforme
				}
			}
			}
			return Double.valueOf(2);//montant non conforme



	}*/




	//@RequestMapping(value = "cumulfrais", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)@ResponseBody

	@ModelAttribute("cumul")
	public Double CalculMontantCumul() {
		EuCompte compteNnMargeSurveillance = null;
		String codeMembreSurveillance = "";
		Double sumNnSurveillance=0d;
		//EuUtilisateur utilisateur = getCurrentUser();


		//retrouver surveillance
		EuActeur acteurSurveillance = acteurService.findSurveillanceSource();
		if(acteurSurveillance!=null){

			codeMembreSurveillance = acteurSurveillance.getCodeMembre();

			compteNnMargeSurveillance = compteService.findCompteById("NN-TMARGE-"+codeMembreSurveillance);
			if(compteNnMargeSurveillance!=null){
				System.out.println("compteNnMargeSurveillance= "+compteNnMargeSurveillance.getCodeCompte());

				
				List<EuNn> listNn = nnService.getListNnByTypeNnAndCodeMembreAndTypeEmission("NNMARGE", codeMembreSurveillance, "Auto");
				
				if(!listNn.isEmpty()){
					sumNnSurveillance = listNn.stream().mapToDouble(EuNn ::getMontantEmis).sum();
				}

				System.out.println("sumNnSurveillance= "+sumNnSurveillance);
				
				
				
				if(compteNnMargeSurveillance.getSolde() >= sumNnSurveillance){
					return sumNnSurveillance;
				}else{
					return Double.valueOf(1);//montant non conforme
				}
			}
		}
		return Double.valueOf(2);//montant non conforme

	}

	@ModelAttribute("ancienTaux")
	public Double findAncienTaux() {

		//retrouver le parametre

		Double taux = parametreService.getParamConso();
		if(taux!=null){

			return taux;
		}else{
			return Double.valueOf(0);//taux introuvable
		}

	}


	// calcul and saveNouveauTaux
	@RequestMapping(value = "/calculandsavenouveautaux", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody Double CalculAndSaveNouveauTaux(HttpServletRequest request){
		Double nouveauMontantEmis = 0d;
		Double nouveauMontantOperation = 0d;
		Double nouveauSoldeSurv  = 0d;
		Double anSommeNnMargeAuto=0d;
		Double ancienTaux = Double.valueOf(request.getParameter("ancienTaux"));
		Double nouveauTaux = Double.valueOf(request.getParameter("nouveauTaux"));
		EuMembreMorale membreMoraleSurveillance=null;
		Double montantFraisExploitation =0d;
		

		System.out.println("ancienTaux= " + ancienTaux);
		System.out.println("nouveauTaux= " + nouveauTaux); 

		EuUtilisateur utilisateur = getCurrentUser();

		if (!Double.isNaN(ancienTaux)&& !Double.isNaN(nouveauTaux)) {

			//retrouver surveillance
			EuActeur acteurSurveillance = acteurService.findSurveillanceSource();
			if(acteurSurveillance!=null){
				String codeMembreSurveillance = acteurSurveillance.getCodeMembre();
				membreMoraleSurveillance  = moraleService.findById(codeMembreSurveillance);
				EuCompte compteNnMargeSurveillance = compteService.findCompteById("NN-TMARGE-"+codeMembreSurveillance);

				List<EuNn> listEuNn = nnService.getListNnByTypeNnAndCodeMembreAndTypeEmission("NNMARGE", codeMembreSurveillance, "Auto");	
				if(!listEuNn.isEmpty()){
					
					anSommeNnMargeAuto = listEuNn.stream().mapToDouble(EuNn ::getMontantEmis).sum();
					  System.out.println("anSommeNnMargeAuto avant modif= "+anSommeNnMargeAuto);

					//modifier la somme de tous les frais d'exploitation existants

					for(EuNn nn: listEuNn){
						nouveauMontantEmis = (nn.getMontantEmis()* 100/ancienTaux)*nouveauTaux/100;
						nn.setMontantEmis(Math.floor(nouveauMontantEmis));
						nn.setMontantRemb(Math.floor(nouveauMontantEmis));
						nnService.add(nn);
					};

					montantFraisExploitation = listEuNn.stream().mapToDouble(EuNn ::getMontantEmis).sum();
				   System.out.println("montantFraisExploitation apres modif= "+montantFraisExploitation);
					
					List<EuOperation> listEuOperation = operationService.getListOperationsFraisExploitation("CREATION DE FRAIS EXPLOITATION") ;	

					if(!listEuOperation.isEmpty()){
						for(EuOperation operation: listEuOperation){
							nouveauMontantOperation = (operation.getMontantOp()* 100/ancienTaux)*nouveauTaux/100;
							operation.setMontantOp(Math.floor(nouveauMontantOperation));
							operationService.add(operation);
						};
					}
					//mise à jour du compte surveillance

					if(compteNnMargeSurveillance!=null){
					  
					nouveauSoldeSurv =compteNnMargeSurveillance.getSolde() - anSommeNnMargeAuto + montantFraisExploitation;
					 System.out.println("nouveauSoldeSurv = "+nouveauSoldeSurv);
						
					compteNnMargeSurveillance.setSolde(Math.floor(nouveauSoldeSurv));
						compteService.create(compteNnMargeSurveillance);
					}
					//mise a jour compte parametre

					EuParametres parametre = parametreService.findById(new EuParametresPK("tauxoperation", "taux sur les opérations marchandes"));
					if(parametre!=null){
						parametre.setMontant(nouveauTaux);
						parametreService.add(parametre);
					}
					
				}else{
					//calcul des frais d'exploitation

					Double montantDesBons = bonService.findSumAllBonConso();
					System.out.println("montantDesBons = "+montantDesBons);
					
					if(montantDesBons>0){
					montantFraisExploitation = montantDesBons  * nouveauTaux/100;
					System.out.println("montantFraisExploitation = "+montantFraisExploitation);			
					//creation des frais d'exploitation cumules
					Long id = nnService.getLastInsertId();
					if (id == null) {
						id = 0L;
					}
					EuTypeNn typeNn = new EuTypeNn();
					typeNn.setCodeTypeNn("NNMARGE");
					EuNn eunn = new EuNn();
					eunn.setDateEmission(new Date());
					eunn.setIdNn(id + 1);
					eunn.setEuMembreMorale(membreMoraleSurveillance);
					eunn.setEuTypeNn(typeNn);
					eunn.setMontantEmis(Math.floor(montantFraisExploitation));
					eunn.setMontantRemb(Math.floor(montantFraisExploitation));
					eunn.setSoldeNn(0.0);
					eunn.setTypeEmission("Auto");
					eunn.setIdUtilisateur(utilisateur.getIdUtilisateur());
					nnService.add(eunn);

					//euoperation
					Long idOperation3 = operationService.getLastOperation();
					idOperation3++;
					EuOperation euoperation3 = new EuOperation();
					euoperation3.setIdOperation(idOperation3);
					euoperation3.setDateOp(new Date());
					euoperation3.setHeureOp(new Date());
					euoperation3.setMontantOp(Math.floor(montantFraisExploitation));
					euoperation3.setEuMembreMorale(membreMoraleSurveillance);
					euoperation3.setEuUtilisateur(utilisateur);
					euoperation3.setCodeProduit("NN");
					euoperation3.setLibOp("CREATION DE FRAIS EXPLOITATION");
					euoperation3.setEuCategorieCompte(compteNnMargeSurveillance.getEuCategorieCompte());
					euoperation3.setTypeOp("BL");
					operationService.add(euoperation3);
					}
					
					//mise à jour du compte surveillance
					nouveauSoldeSurv = compteNnMargeSurveillance.getSolde() + Math.floor(montantFraisExploitation);
					compteNnMargeSurveillance.setSolde(nouveauSoldeSurv);
					compteService.create(compteNnMargeSurveillance);
					
					//mise a jour compte parametre
					EuParametres parametre = parametreService.findById(new EuParametresPK("tauxoperation", "taux sur les opérations marchandes"));
					if(parametre!=null){
						parametre.setMontant(nouveauTaux);
						parametreService.add(parametre);
					}
					
				}

				return Double.valueOf(Math.floor(montantFraisExploitation));
			}

		}
		return Double.valueOf(1);
	}



	// saveNouveauTaux
	@RequestMapping(value = "/onlysavenouveautaux", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody Double saveNouveauTaux(HttpServletRequest request){

		Double nouveauTaux = Double.valueOf(request.getParameter("nouveauTaux"));
		System.out.println("nouveauTaux= " + nouveauTaux); 

		if ( !Double.isNaN(nouveauTaux)) {

			//mise a jour compte parametre

			EuParametres parametre = parametreService.findById(new EuParametresPK("tauxoperation", "taux sur les opérations marchandes"));
			if(parametre!=null){
				parametre.setMontant(nouveauTaux);
				parametreService.add(parametre);
			}
			return Double.valueOf(0);
		}
		return Double.valueOf(1);
	}
}
